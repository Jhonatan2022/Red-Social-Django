"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# Importamos Path para poder acceder a las rutas
from pathlib import Path

# Imprtamos os para poder acceder a las variables de entorno
import os

# Importamos environ para poder acceder a las variables de entorno
import environ
#-----------------------------IMPORTAMOS LAS LIBRERIAS-------------------------#


# Declaramos la variable de entorno
env = environ.Env()

# Leemos el archivo .env
environ.Env.read_env()

ENVIRONMENT = env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'RENDER' not in os.environ # Si no estamos en render, debug es True



ALLOWED_HOSTS = [

    # Indicamos que cualquier host puede acceder a la app
    '*', # El asterisco indica que cualquier url puede acceder a la app
]



# Agregamos una configuración de external host para que render funcione
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')

# Si estamos en render, agregamos el hostname a los allowed hosts
if RENDER_EXTERNAL_HOSTNAME:

    # Agregamos el hostname a los allowed hosts
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)



# Ponemos la direccion de npm para que pueda ejecutar tailwind
NPM_BIN_PATH = "C:/Program Files/nodejs/npm.cmd"


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Agregamos sites para 
    'django.contrib.sites',

    # Integramos humanize para que pueda verse de 16/02/2021 a 56 minutos atrás
    'django.contrib.humanize',

    # Importamos tailwind para poder usarlo en el proyecto
    'tailwind',

    # Importamos la app que creamos con tailwind
    'theme',

    # Importamos algunos componentes de allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Importamos crispy para el diseño y manejo de los formularios
    'crispy_forms',
    "crispy_tailwind",

    # Importamos la app principal
    'core',

    # Importamos la app de accounts
    'accounts',

    # Importamos la nueva app
    'social',
]

# Configuramos el sitio con site_id = 1 para que funcione allauth
SITE_ID = 1



# Configuramos tailwind
TAILWIND_APP_NAME = 'theme'


# Configuramos el path de tailwind para que funcione con render
INTERNAL_IPS = [
   "127.0.0.1",
]


# Configuramos crispy
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"

# Configuramos crispy para que funcione con tailwind
CRISPY_TEMPLATE_PACK = "tailwind"



# Agregamos funciones para que se ejecute con exito la autenticación de usuarios
AUTHENTICATION_BACKENDS = [

    # Agregamos la autenticación de usuarios por defecto de django
    "django.contrib.auth.backends.ModelBackend",

    # Agregamos la autenticación de usuarios con allauth
    "allauth.account.auth_backends.AuthenticationBackend",
]



# Configuramos el login y logout de allauth para que funcione con tailwind

# Configuramos el login
ACCOUNT_ALLOW_REGISTRATION = env.bool("DJANGO_ACCOUNT_ALLOW_REGISTRATION", True)

# DETERMINAMOS EL TIPO DE AUTENTICACIÓN DE USUARIOS
ACCOUNT_AUTHENTICATION_METHOD = "email"

# DETERMINAMOS SI EL USUARIO DEBE INGRESAR SU EMAIL PARA INICIAR SESIÓN
ACCOUNT_EMAIL_REQUIRED = True

# DETERMINAMOS SI EL EMAIL DEBE SER ÚNICO
ACCOUNT_EMAIL_UNIQUE = True

# Especificamos el modelo de usuario que usaremos
AUTH_USER_MODEL = "accounts.User"

# DETERMINAMOS EL CERRADO DE SESIÓN
ACCOUNT_LOGOUT_ON_GET = True

# MANDAMOS UN EMAIL DE VERIFICACIÓN CUANDO EL USUARIO SE REGISTRA O CAMBIA SU EMAIL
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# DETERMINAMOS LA CANTIDAD DE INTENTOS DE INGRESO AL SISTEMA
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 3

# DETERMINAMOS EL TIEMPO DE ESPERA PARA PODER INTENTAR INGRESAR AL SISTEMA
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300

# CUANDO EL USUARIO INICIA SESIÓN LO REDIRIGIMOS A LA PÁGINA DE PERFIL
LOGIN_REDIRECT_URL = "/"

# TOMAMOS EL VALOR DE LA VARIABLE DE ENTORNO PARA EL EMAIL DE VERIFICACIÓN
LOGIN_URL = "account_login"




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        # Indicamos la ruta de las plantillas
        'DIRS': [ os.path.join(BASE_DIR, 'templates') ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Este comando es para desplegar python en cualquier servidor
WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Configuramos la base de datos sqlite3
""" DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
} """

# # Configuramos la base de datos postgresql
# DATABASES = {

#     # Configuramos la base de datos de render
#     "default": env.db("DATABASE_URL", default="postgres:///social"),
# }

# # Configuramos la base de datos de render
# DATABASES["default"]["ATOMIC_REQUESTS"] = True

DATABASES = {
    "default": env.db("DATABASE_URL", default="postgres:///social"),
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation nos permite encriptar las contraseñas de los usuarios
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
# idioma de la pagina web en-us (ingles) es (español) pt (portugues) fr (frances)
LANGUAGE_CODE = 'en-us' 

# UTC-5 (hora de venezuela) UTC-4 (hora de colombia) UTC-3 (hora de argentina)
TIME_ZONE = 'UTC' 
USE_I18N = True
USE_L10N = True
USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# Indicamos la ruta de los archivos estaticos (css, js, img)
STATIC_URL = '/static/'

# Manejamos los archivos estaticos localmente
STATICFILES_DIRS = [

    # Indicamos la ruta de los archivos estaticos
    os.path.join(BASE_DIR, 'static')
]
# Pasamos todos los archivos a static_root cuando se suba a produccion
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')
# Indicamos la ruta de los archivos media
MEDIA_URL = '/media/'
# Indicamos la ruta de los archivos media
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Verificamos si la aplicacion esta en modo debug o no debug para enviar correos
EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'

#--------------------CONFIGURAMOS EL DESPLIEGUE DE AMAZON----------------------#

if not DEBUG:

    # Verificamos si la aplicacion esta en modo debug o no debug para enviar correos
    EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'

    # Configuramos el envio de correos
    EMAIL_HOST = env('EMAIL_HOST')
    EMAIL_HOST_USER = env('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
    EMAIL_PORT = env('EMAIL_PORT')
    EMAIL_USE_TLS = env('EMAIL_USE_TLS')


    # Cambiamos la configuracion de seguridad de la aplicacion
    SESSION_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # django-ckeditor will not work with S3 through django-storages without this line in settings.py
    AWS_QUERYSTRING_AUTH = False

    # aws settings

    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')


    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_DEFAULT_ACL = 'public-read'

    # s3 static settings

    STATIC_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # s3 public media settings

    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'core.storage_backends.MediaStore'

    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')